Question 1
Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.


Ans - function findCommonElements(arr1, arr2, arr3) {
  let result = [];
  let i = 0, j = 0, k = 0;
  
  while (i < arr1.length && j < arr2.length && k < arr3.length) {
    if (arr1[i] === arr2[j] && arr2[j] === arr3[k]) {
      result.push(arr1[i]);
      i++;
      j++;
      k++;
    } else if (arr1[i] < arr2[j]) {
      i++;
    } else if (arr2[j] < arr3[k]) {
      j++;
    } else {
      k++;
    }
  }
  
  return result;
}

// Test the function with the given example
const arr1 = [1, 2, 3, 4, 5];
const arr2 = [1, 2, 5, 7, 9];
const arr3 = [1, 3, 4, 5, 8];

const commonElements = findCommonElements(arr1, arr2, arr3);
console.log(commonElements);


ðŸ’¡ Question 2

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.


Ans - function findDistinctElements(nums1, nums2) {
  let distinctNums1 = [];
  let distinctNums2 = [];
  
  for (let num of nums1) {
    if (!nums2.includes(num) && !distinctNums1.includes(num)) {
      distinctNums1.push(num);
    }
  }
  
  for (let num of nums2) {
    if (!nums1.includes(num) && !distinctNums2.includes(num)) {
      distinctNums2.push(num);
    }
  }
  
  return [distinctNums1, distinctNums2];
}

// Test the function with the given example
const nums1 = [1, 2, 3];
const nums2 = [2, 4, 6];

const distinctElements = findDistinctElements(nums1, nums2);
console.log(distinctElements);


ðŸ’¡ **Question 3**
Given a 2D integer array matrix, return *the **transpose** of* matrix.

The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

Ans - function transposeMatrix(matrix) {
  const rows = matrix.length;
  const cols = matrix[0].length;
  
  // Create a new matrix with switched dimensions
  const transposedMatrix = [];
  for (let i = 0; i < cols; i++) {
    transposedMatrix[i] = [];
    for (let j = 0; j < rows; j++) {
      transposedMatrix[i][j] = matrix[j][i];
    }
  }
  
  return transposedMatrix;
}

// Test the function with the given example
const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

const transposed = transposeMatrix(matrix);
console.log(transposed);

ðŸ’¡ **Question 4**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is **maximized**. Return *the maximized sum*.

**Example 1:**

Input: nums = [1,4,3,2]

Output: 4

Ans - function arrayPairSum(nums) {
  // Sort the array in ascending order
  nums.sort((a, b) => a - b);

  let sum = 0;
  
  // Iterate over the sorted array, summing the minimum of each pair
  for (let i = 0; i < nums.length; i += 2) {
    sum += nums[i];
  }
  
  return sum;
}

// Test the function with the given example
const nums = [1, 4, 3, 2];

const maxSum = arrayPairSum(nums);
console.log(maxSum);


ðŸ’¡ **Question 5**
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

Ans - function arrangeCoins(n) {
  let count = 0;
  let currRowCoins = 1;
  
  while (n >= currRowCoins) {
    n -= currRowCoins;
    count++;
    currRowCoins++;
  }
  
  return count;
}

// Test the function with the given example
const n = 5;

const completeRows = arrangeCoins(n);
console.log(completeRows);

Question 6
Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Ans - function sortedSquares(nums) {
    const result = [];
  
    let left = 0;
    let right = nums.length - 1;
    
    while (left <= right) {
      const leftSquare = nums[left] ** 2;
      const rightSquare = nums[right] ** 2;
      
      if (leftSquare > rightSquare) {
        result.unshift(leftSquare);
        left++;
      } else {
        result.unshift(rightSquare);
        right--;
      }
    }
    
    return result;
  }
  
  // Test the function with the given example
  const nums = [-4, -1, 0, 3, 10];
  
  const squaredSorted = sortedSquares(nums);
  console.log(squaredSorted);


ðŸ’¡ **Question 7**
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*


Ans - function maxCount(m, n, ops) {
    let minX = m;
    let minY = n;
    
    for (let op of ops) {
      minX = Math.min(minX, op[0]);
      minY = Math.min(minY, op[1]);
    }
    
    return minX * minY;
  }
  
  // Test the function with the given example
  const m = 3;
  const n = 3;
  const ops = [[2, 2], [3, 3]];
  
  const maxIntegers = maxCount(m, n, ops);
  console.log(maxIntegers);

ðŸ’¡ **Question 8**

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

**Example 1:**

**Input:** nums = [2,5,1,3,4,7], n = 3

**Output:** [2,3,5,4,1,7]

**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].

Ans - function shuffle(nums, n) {
    const result = [];
  
    for (let i = 0; i < n; i++) {
      result.push(nums[i]);
      result.push(nums[i + n]);
    }
  
    return result;
  }
  
  // Test the function with the given example
  const nums = [2, 5, 1, 3, 4, 7];
  const n = 3;
  
  const shuffledArray = shuffle(nums, n);
  console.log(shuffledArray);
  
